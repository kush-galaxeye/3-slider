import App from "./app/index.js";
export { default as App } from './app/index.js';
import * as _Messages from "./messages/index.js";
export declare const Messages: typeof _Messages;
import { Options as AppOptions } from "./app/index.js";
import { Options as ConsoleOptions } from "./modules/console.js";
import { Options as ExceptionOptions } from "./modules/exception.js";
import { Options as InputOptions } from "./modules/input.js";
import { Options as PerformanceOptions } from "./modules/performance.js";
import { Options as TimingOptions } from "./modules/timing.js";
export type { OnStartInfo } from './app/index.js';
export declare type Options = Partial<AppOptions & ConsoleOptions & ExceptionOptions & InputOptions & PerformanceOptions & TimingOptions> & {
    projectID?: number;
    projectKey: string;
    sessionToken?: string;
    respectDoNotTrack?: boolean;
    __DISABLE_SECURE_MODE?: boolean;
};
export default class API {
    private readonly options;
    private readonly app;
    constructor(options: Options);
    use<T>(fn: (app: App | null, options?: Options) => T): T;
    isActive(): boolean;
    active(): boolean;
    start(): Promise<import("./app/index.js").OnStartInfo>;
    stop(): void;
    getSessionToken(): string | null | undefined;
    getSessionID(): string | null | undefined;
    sessionID(): string | null | undefined;
    setUserID(id: string): void;
    userID(id: string): void;
    setUserAnonymousID(id: string): void;
    userAnonymousID(id: string): void;
    setMetadata(key: string, value: string): void;
    metadata(key: string, value: string): void;
    event(key: string, payload: any, issue?: boolean): void;
    issue(key: string, payload: any): void;
    handleError: (e: Error | ErrorEvent | PromiseRejectionEvent) => void;
}
