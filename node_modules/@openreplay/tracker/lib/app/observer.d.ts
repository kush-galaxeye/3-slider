import App from "./index.js";
interface Window extends WindowProxy {
    HTMLInputElement: typeof HTMLInputElement;
    HTMLLinkElement: typeof HTMLLinkElement;
    HTMLStyleElement: typeof HTMLStyleElement;
    SVGStyleElement: typeof SVGStyleElement;
    HTMLIFrameElement: typeof HTMLIFrameElement;
    Text: typeof Text;
    Element: typeof Element;
}
export interface Options {
    obscureTextEmails: boolean;
    obscureTextNumbers: boolean;
    captureIFrames: boolean;
}
export default class Observer {
    private readonly app;
    private readonly options;
    private readonly context;
    private readonly observer;
    private readonly commited;
    private readonly recents;
    private readonly indexes;
    private readonly attributesList;
    private readonly textSet;
    private readonly textMasked;
    constructor(app: App, options: Options, context?: Window);
    private clear;
    private isInstance;
    private isIgnored;
    private sendNodeAttribute;
    getInnerTextSecure(el: HTMLElement): string;
    private checkObscure;
    private sendNodeData;
    private bindNode;
    private bindTree;
    private unbindNode;
    private _commitNode;
    private commitNode;
    private commitNodes;
    private iframeObservers;
    private handleIframe;
    private observeIframe;
    observe(): void;
    disconnect(): void;
}
export {};
