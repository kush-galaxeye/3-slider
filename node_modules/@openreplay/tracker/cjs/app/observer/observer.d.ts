import App from "../index.js";
export interface Window extends globalThis.Window {
    HTMLInputElement: typeof HTMLInputElement;
    HTMLLinkElement: typeof HTMLLinkElement;
    HTMLStyleElement: typeof HTMLStyleElement;
    SVGStyleElement: typeof SVGStyleElement;
    HTMLIFrameElement: typeof HTMLIFrameElement;
    Text: typeof Text;
    Element: typeof Element;
    ShadowRoot: typeof ShadowRoot;
}
declare type WindowConstructor = Document | Element | Text | ShadowRoot | HTMLInputElement | HTMLLinkElement | HTMLStyleElement | HTMLIFrameElement;
declare type Constructor<T> = {
    new (...args: any[]): T;
    name: string;
};
export declare function isInstance<T extends WindowConstructor>(node: Node, constr: Constructor<T>): node is T;
export interface Options {
    obscureTextEmails: boolean;
    obscureTextNumbers: boolean;
}
export default abstract class Observer<AdditionalOptions = {}> {
    protected readonly app: App;
    protected readonly context: Window;
    private readonly observer;
    private readonly commited;
    private readonly recents;
    private readonly myNodes;
    private readonly indexes;
    private readonly attributesList;
    private readonly textSet;
    private readonly textMasked;
    protected readonly options: Options & AdditionalOptions;
    private readonly inUpperContext;
    constructor(app: App, options: Partial<Options> & AdditionalOptions, context?: Window);
    private clear;
    private sendNodeAttribute;
    getInnerTextSecure(el: HTMLElement): string;
    private checkObscure;
    private sendNodeData;
    private bindNode;
    private bindTree;
    private unbindNode;
    private _commitNode;
    private commitNode;
    private commitNodes;
    protected observeRoot(node: Node, beforeCommit: (id?: number) => unknown, nodeToBind?: Node): void;
    disconnect(): void;
}
export {};
