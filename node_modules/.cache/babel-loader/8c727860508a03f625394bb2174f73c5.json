{"ast":null,"code":"import Observer, { isInstance } from \"./observer.js\";\nimport IFrameObserver from \"./iframe_observer.js\";\nimport ShadowRootObserver from \"./shadow_root_observer.js\";\nimport { CreateDocument } from \"../../messages/index.js\";\nconst attachShadowNativeFn = Element.prototype.attachShadow;\nexport default class TopObserver extends Observer {\n  constructor(app, options) {\n    super(app, Object.assign({\n      captureIFrames: false\n    }, options));\n    this.iframeObservers = [];\n    this.shadowRootObservers = []; // IFrames\n\n    this.app.nodes.attachNodeCallback(node => {\n      if (isInstance(node, HTMLIFrameElement) && (this.options.captureIFrames || node.getAttribute(\"data-openreplay-capture\"))) {\n        this.handleIframe(node);\n      }\n    }); // ShadowDOM\n\n    this.app.nodes.attachNodeCallback(node => {\n      if (isInstance(node, Element) && node.shadowRoot !== null) {\n        this.handleShadowRoot(node.shadowRoot);\n      }\n    });\n  }\n\n  handleIframe(iframe) {\n    let context = null;\n    const handle = this.app.safe(() => {\n      const id = this.app.nodes.getID(iframe);\n\n      if (id === undefined) {\n        return;\n      } //log\n\n\n      if (iframe.contentWindow === context) {\n        return;\n      } //Does this happen frequently?\n\n\n      context = iframe.contentWindow;\n\n      if (!context) {\n        return;\n      }\n\n      const observer = new IFrameObserver(this.app, this.options, context);\n      this.iframeObservers.push(observer);\n      observer.observe(iframe);\n    });\n    this.app.attachEventListener(iframe, \"load\", handle);\n    handle();\n  }\n\n  handleShadowRoot(shRoot) {\n    const observer = new ShadowRootObserver(this.app, this.options, this.context);\n    this.shadowRootObservers.push(observer);\n    observer.observe(shRoot.host);\n  }\n\n  observe() {\n    // Protection from several subsequent calls?\n    const observer = this;\n\n    Element.prototype.attachShadow = function () {\n      const shadow = attachShadowNativeFn.apply(this, arguments);\n      observer.handleShadowRoot(shadow);\n      return shadow;\n    }; // Can observe documentElement (<html>) here, because it is not supposed to be changing.\n    // However, it is possible in some exotic cases and may cause an ignorance of the newly created <html>\n    // In this case context.document have to be observed, but this will cause \n    // the change in the re-player behaviour caused by CreateDocument message: \n    //   the 0-node (\"fRoot\") will become #document rather than documentElement as it is now.\n    // Alternatively - observe(#document) then bindNode(documentElement)\n\n\n    this.observeRoot(this.context.document, () => {\n      this.app.send(new CreateDocument());\n    }, this.context.document.documentElement);\n  }\n\n  disconnect() {\n    Element.prototype.attachShadow = attachShadowNativeFn;\n    this.iframeObservers.forEach(o => o.disconnect());\n    this.iframeObservers = [];\n    this.shadowRootObservers.forEach(o => o.disconnect());\n    this.shadowRootObservers = [];\n    super.disconnect();\n  }\n\n}","map":{"version":3,"sources":["/Users/kushthakker/Downloads/imagecompare-both/node_modules/@openreplay/tracker/lib/app/observer/top_observer.js"],"names":["Observer","isInstance","IFrameObserver","ShadowRootObserver","CreateDocument","attachShadowNativeFn","Element","prototype","attachShadow","TopObserver","constructor","app","options","Object","assign","captureIFrames","iframeObservers","shadowRootObservers","nodes","attachNodeCallback","node","HTMLIFrameElement","getAttribute","handleIframe","shadowRoot","handleShadowRoot","iframe","context","handle","safe","id","getID","undefined","contentWindow","observer","push","observe","attachEventListener","shRoot","host","shadow","apply","arguments","observeRoot","document","send","documentElement","disconnect","forEach","o"],"mappings":"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","sourcesContent":["import Observer, { isInstance } from \"./observer.js\";\nimport IFrameObserver from \"./iframe_observer.js\";\nimport ShadowRootObserver from \"./shadow_root_observer.js\";\nimport { CreateDocument } from \"../../messages/index.js\";\nconst attachShadowNativeFn = Element.prototype.attachShadow;\nexport default class TopObserver extends Observer {\n    constructor(app, options) {\n        super(app, Object.assign({\n            captureIFrames: false\n        }, options));\n        this.iframeObservers = [];\n        this.shadowRootObservers = [];\n        // IFrames\n        this.app.nodes.attachNodeCallback(node => {\n            if (isInstance(node, HTMLIFrameElement) &&\n                (this.options.captureIFrames || node.getAttribute(\"data-openreplay-capture\"))) {\n                this.handleIframe(node);\n            }\n        });\n        // ShadowDOM\n        this.app.nodes.attachNodeCallback(node => {\n            if (isInstance(node, Element) && node.shadowRoot !== null) {\n                this.handleShadowRoot(node.shadowRoot);\n            }\n        });\n    }\n    handleIframe(iframe) {\n        let context = null;\n        const handle = this.app.safe(() => {\n            const id = this.app.nodes.getID(iframe);\n            if (id === undefined) {\n                return;\n            } //log\n            if (iframe.contentWindow === context) {\n                return;\n            } //Does this happen frequently?\n            context = iframe.contentWindow;\n            if (!context) {\n                return;\n            }\n            const observer = new IFrameObserver(this.app, this.options, context);\n            this.iframeObservers.push(observer);\n            observer.observe(iframe);\n        });\n        this.app.attachEventListener(iframe, \"load\", handle);\n        handle();\n    }\n    handleShadowRoot(shRoot) {\n        const observer = new ShadowRootObserver(this.app, this.options, this.context);\n        this.shadowRootObservers.push(observer);\n        observer.observe(shRoot.host);\n    }\n    observe() {\n        // Protection from several subsequent calls?\n        const observer = this;\n        Element.prototype.attachShadow = function () {\n            const shadow = attachShadowNativeFn.apply(this, arguments);\n            observer.handleShadowRoot(shadow);\n            return shadow;\n        };\n        // Can observe documentElement (<html>) here, because it is not supposed to be changing.\n        // However, it is possible in some exotic cases and may cause an ignorance of the newly created <html>\n        // In this case context.document have to be observed, but this will cause \n        // the change in the re-player behaviour caused by CreateDocument message: \n        //   the 0-node (\"fRoot\") will become #document rather than documentElement as it is now.\n        // Alternatively - observe(#document) then bindNode(documentElement)\n        this.observeRoot(this.context.document, () => {\n            this.app.send(new CreateDocument());\n        }, this.context.document.documentElement);\n    }\n    disconnect() {\n        Element.prototype.attachShadow = attachShadowNativeFn;\n        this.iframeObservers.forEach(o => o.disconnect());\n        this.iframeObservers = [];\n        this.shadowRootObservers.forEach(o => o.disconnect());\n        this.shadowRootObservers = [];\n        super.disconnect();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}