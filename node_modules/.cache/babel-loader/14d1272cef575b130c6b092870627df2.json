{"ast":null,"code":"import { JSException } from \"../messages/index.js\";\nimport ErrorStackParser from 'error-stack-parser';\n\nfunction getDefaultStack(e) {\n  return [{\n    columnNumber: e.colno,\n    lineNumber: e.lineno,\n    fileName: e.filename,\n    functionName: \"\",\n    source: \"\"\n  }];\n}\n\nexport function getExceptionMessage(error, fallbackStack) {\n  let stack = fallbackStack;\n\n  try {\n    stack = ErrorStackParser.parse(error);\n  } catch (e) {}\n\n  return new JSException(error.name, error.message, JSON.stringify(stack));\n}\nexport function getExceptionMessageFromEvent(e) {\n  if (e instanceof ErrorEvent) {\n    if (e.error instanceof Error) {\n      return getExceptionMessage(e.error, getDefaultStack(e));\n    } else {\n      let [name, message] = e.message.split(':');\n\n      if (!message) {\n        name = 'Error';\n        message = e.message;\n      }\n\n      return new JSException(name, message, JSON.stringify(getDefaultStack(e)));\n    }\n  } else if ('PromiseRejectionEvent' in window && e instanceof PromiseRejectionEvent) {\n    if (e.reason instanceof Error) {\n      return getExceptionMessage(e.reason, []);\n    } else {\n      let message;\n\n      try {\n        message = JSON.stringify(e.reason);\n      } catch (_) {\n        message = String(e.reason);\n      }\n\n      return new JSException('Unhandled Promise Rejection', message, '[]');\n    }\n  }\n\n  return null;\n}\nexport default function (app, opts) {\n  const options = Object.assign({\n    captureExceptions: true\n  }, opts);\n\n  if (options.captureExceptions) {\n    const handler = e => {\n      const msg = getExceptionMessageFromEvent(e);\n\n      if (msg != null) {\n        app.send(msg);\n      }\n    };\n\n    app.attachEventListener(window, 'unhandledrejection', e => handler(e));\n    app.attachEventListener(window, 'error', e => handler(e));\n  }\n}","map":{"version":3,"sources":["/Users/kushthakker/Downloads/imagecompare-both/node_modules/@openreplay/tracker/lib/modules/exception.js"],"names":["JSException","ErrorStackParser","getDefaultStack","e","columnNumber","colno","lineNumber","lineno","fileName","filename","functionName","source","getExceptionMessage","error","fallbackStack","stack","parse","name","message","JSON","stringify","getExceptionMessageFromEvent","ErrorEvent","Error","split","window","PromiseRejectionEvent","reason","_","String","app","opts","options","Object","assign","captureExceptions","handler","msg","send","attachEventListener"],"mappings":"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","sourcesContent":["import { JSException } from \"../messages/index.js\";\nimport ErrorStackParser from 'error-stack-parser';\nfunction getDefaultStack(e) {\n    return [{\n            columnNumber: e.colno,\n            lineNumber: e.lineno,\n            fileName: e.filename,\n            functionName: \"\",\n            source: \"\",\n        }];\n}\nexport function getExceptionMessage(error, fallbackStack) {\n    let stack = fallbackStack;\n    try {\n        stack = ErrorStackParser.parse(error);\n    }\n    catch (e) {\n    }\n    return new JSException(error.name, error.message, JSON.stringify(stack));\n}\nexport function getExceptionMessageFromEvent(e) {\n    if (e instanceof ErrorEvent) {\n        if (e.error instanceof Error) {\n            return getExceptionMessage(e.error, getDefaultStack(e));\n        }\n        else {\n            let [name, message] = e.message.split(':');\n            if (!message) {\n                name = 'Error';\n                message = e.message;\n            }\n            return new JSException(name, message, JSON.stringify(getDefaultStack(e)));\n        }\n    }\n    else if ('PromiseRejectionEvent' in window && e instanceof PromiseRejectionEvent) {\n        if (e.reason instanceof Error) {\n            return getExceptionMessage(e.reason, []);\n        }\n        else {\n            let message;\n            try {\n                message = JSON.stringify(e.reason);\n            }\n            catch (_) {\n                message = String(e.reason);\n            }\n            return new JSException('Unhandled Promise Rejection', message, '[]');\n        }\n    }\n    return null;\n}\nexport default function (app, opts) {\n    const options = Object.assign({\n        captureExceptions: true,\n    }, opts);\n    if (options.captureExceptions) {\n        const handler = (e) => {\n            const msg = getExceptionMessageFromEvent(e);\n            if (msg != null) {\n                app.send(msg);\n            }\n        };\n        app.attachEventListener(window, 'unhandledrejection', (e) => handler(e));\n        app.attachEventListener(window, 'error', (e) => handler(e));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}