{"ast":null,"code":"import { CSSInsertRuleURLBased, CSSDeleteRule, TechnicalInfo } from \"../messages/index.js\";\nexport default function (app) {\n  if (app === null) {\n    return;\n  }\n\n  if (!window.CSSStyleSheet) {\n    app.send(new TechnicalInfo(\"no_stylesheet_prototype_in_window\", \"\"));\n    return;\n  }\n\n  const processOperation = app.safe((stylesheet, index, rule) => {\n    const sendMessage = typeof rule === 'string' ? nodeID => app.send(new CSSInsertRuleURLBased(nodeID, rule, index, app.getBaseHref())) : nodeID => app.send(new CSSDeleteRule(nodeID, index)); // TODO: Extend messages to maintain nested rules (CSSGroupingRule prototype, as well as CSSKeyframesRule)\n\n    if (stylesheet.ownerNode == null) {\n      throw new Error(\"Owner Node not found\");\n    }\n\n    const nodeID = app.nodes.getID(stylesheet.ownerNode);\n\n    if (nodeID !== undefined) {\n      sendMessage(nodeID);\n    } // else error?\n\n  });\n  const {\n    insertRule,\n    deleteRule\n  } = CSSStyleSheet.prototype;\n\n  CSSStyleSheet.prototype.insertRule = function (rule) {\n    let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    processOperation(this, index, rule);\n    return insertRule.call(this, rule, index);\n  };\n\n  CSSStyleSheet.prototype.deleteRule = function (index) {\n    processOperation(this, index);\n    return deleteRule.call(this, index);\n  };\n\n  app.nodes.attachNodeCallback(node => {\n    if (!(node instanceof HTMLStyleElement)) {\n      return;\n    }\n\n    if (!(node.sheet instanceof CSSStyleSheet)) {\n      return;\n    }\n\n    if (node.textContent !== null && node.textContent.trim().length > 0) {\n      return; // Only fully virtual sheets maintained so far\n    }\n\n    const rules = node.sheet.cssRules;\n\n    for (let i = 0; i < rules.length; i++) {\n      processOperation(node.sheet, i, rules[i].cssText);\n    }\n  });\n}","map":{"version":3,"sources":["/Users/kushthakker/Downloads/imagecompare-both/node_modules/@openreplay/tracker/lib/modules/cssrules.js"],"names":["CSSInsertRuleURLBased","CSSDeleteRule","TechnicalInfo","app","window","CSSStyleSheet","send","processOperation","safe","stylesheet","index","rule","sendMessage","nodeID","getBaseHref","ownerNode","Error","nodes","getID","undefined","insertRule","deleteRule","prototype","call","attachNodeCallback","node","HTMLStyleElement","sheet","textContent","trim","length","rules","cssRules","i","cssText"],"mappings":"AAAA,SAASA,qBAAT,EAAgCC,aAAhC,EAA+CC,aAA/C,QAAoE,sBAApE;AACA,eAAe,UAAUC,GAAV,EAAe;AAC1B,MAAIA,GAAG,KAAK,IAAZ,EAAkB;AACd;AACH;;AACD,MAAI,CAACC,MAAM,CAACC,aAAZ,EAA2B;AACvBF,IAAAA,GAAG,CAACG,IAAJ,CAAS,IAAIJ,aAAJ,CAAkB,mCAAlB,EAAuD,EAAvD,CAAT;AACA;AACH;;AACD,QAAMK,gBAAgB,GAAGJ,GAAG,CAACK,IAAJ,CAAS,CAACC,UAAD,EAAaC,KAAb,EAAoBC,IAApB,KAA6B;AAC3D,UAAMC,WAAW,GAAG,OAAOD,IAAP,KAAgB,QAAhB,GACbE,MAAD,IAAYV,GAAG,CAACG,IAAJ,CAAS,IAAIN,qBAAJ,CAA0Ba,MAA1B,EAAkCF,IAAlC,EAAwCD,KAAxC,EAA+CP,GAAG,CAACW,WAAJ,EAA/C,CAAT,CADE,GAEbD,MAAD,IAAYV,GAAG,CAACG,IAAJ,CAAS,IAAIL,aAAJ,CAAkBY,MAAlB,EAA0BH,KAA1B,CAAT,CAFlB,CAD2D,CAI3D;;AACA,QAAID,UAAU,CAACM,SAAX,IAAwB,IAA5B,EAAkC;AAC9B,YAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AACH;;AACD,UAAMH,MAAM,GAAGV,GAAG,CAACc,KAAJ,CAAUC,KAAV,CAAgBT,UAAU,CAACM,SAA3B,CAAf;;AACA,QAAIF,MAAM,KAAKM,SAAf,EAA0B;AACtBP,MAAAA,WAAW,CAACC,MAAD,CAAX;AACH,KAX0D,CAWzD;;AACL,GAZwB,CAAzB;AAaA,QAAM;AAAEO,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA6BhB,aAAa,CAACiB,SAAjD;;AACAjB,EAAAA,aAAa,CAACiB,SAAd,CAAwBF,UAAxB,GAAqC,UAAUT,IAAV,EAA2B;AAAA,QAAXD,KAAW,uEAAH,CAAG;AAC5DH,IAAAA,gBAAgB,CAAC,IAAD,EAAOG,KAAP,EAAcC,IAAd,CAAhB;AACA,WAAOS,UAAU,CAACG,IAAX,CAAgB,IAAhB,EAAsBZ,IAAtB,EAA4BD,KAA5B,CAAP;AACH,GAHD;;AAIAL,EAAAA,aAAa,CAACiB,SAAd,CAAwBD,UAAxB,GAAqC,UAAUX,KAAV,EAAiB;AAClDH,IAAAA,gBAAgB,CAAC,IAAD,EAAOG,KAAP,CAAhB;AACA,WAAOW,UAAU,CAACE,IAAX,CAAgB,IAAhB,EAAsBb,KAAtB,CAAP;AACH,GAHD;;AAIAP,EAAAA,GAAG,CAACc,KAAJ,CAAUO,kBAAV,CAA8BC,IAAD,IAAU;AACnC,QAAI,EAAEA,IAAI,YAAYC,gBAAlB,CAAJ,EAAyC;AACrC;AACH;;AACD,QAAI,EAAED,IAAI,CAACE,KAAL,YAAsBtB,aAAxB,CAAJ,EAA4C;AACxC;AACH;;AACD,QAAIoB,IAAI,CAACG,WAAL,KAAqB,IAArB,IAA6BH,IAAI,CAACG,WAAL,CAAiBC,IAAjB,GAAwBC,MAAxB,GAAiC,CAAlE,EAAqE;AACjE,aADiE,CACzD;AACX;;AACD,UAAMC,KAAK,GAAGN,IAAI,CAACE,KAAL,CAAWK,QAAzB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACD,MAA1B,EAAkCG,CAAC,EAAnC,EAAuC;AACnC1B,MAAAA,gBAAgB,CAACkB,IAAI,CAACE,KAAN,EAAaM,CAAb,EAAgBF,KAAK,CAACE,CAAD,CAAL,CAASC,OAAzB,CAAhB;AACH;AACJ,GAdD;AAeH","sourcesContent":["import { CSSInsertRuleURLBased, CSSDeleteRule, TechnicalInfo } from \"../messages/index.js\";\nexport default function (app) {\n    if (app === null) {\n        return;\n    }\n    if (!window.CSSStyleSheet) {\n        app.send(new TechnicalInfo(\"no_stylesheet_prototype_in_window\", \"\"));\n        return;\n    }\n    const processOperation = app.safe((stylesheet, index, rule) => {\n        const sendMessage = typeof rule === 'string'\n            ? (nodeID) => app.send(new CSSInsertRuleURLBased(nodeID, rule, index, app.getBaseHref()))\n            : (nodeID) => app.send(new CSSDeleteRule(nodeID, index));\n        // TODO: Extend messages to maintain nested rules (CSSGroupingRule prototype, as well as CSSKeyframesRule)\n        if (stylesheet.ownerNode == null) {\n            throw new Error(\"Owner Node not found\");\n        }\n        const nodeID = app.nodes.getID(stylesheet.ownerNode);\n        if (nodeID !== undefined) {\n            sendMessage(nodeID);\n        } // else error?\n    });\n    const { insertRule, deleteRule } = CSSStyleSheet.prototype;\n    CSSStyleSheet.prototype.insertRule = function (rule, index = 0) {\n        processOperation(this, index, rule);\n        return insertRule.call(this, rule, index);\n    };\n    CSSStyleSheet.prototype.deleteRule = function (index) {\n        processOperation(this, index);\n        return deleteRule.call(this, index);\n    };\n    app.nodes.attachNodeCallback((node) => {\n        if (!(node instanceof HTMLStyleElement)) {\n            return;\n        }\n        if (!(node.sheet instanceof CSSStyleSheet)) {\n            return;\n        }\n        if (node.textContent !== null && node.textContent.trim().length > 0) {\n            return; // Only fully virtual sheets maintained so far\n        }\n        const rules = node.sheet.cssRules;\n        for (let i = 0; i < rules.length; i++) {\n            processOperation(node.sheet, i, rules[i].cssText);\n        }\n    });\n}\n"]},"metadata":{},"sourceType":"module"}