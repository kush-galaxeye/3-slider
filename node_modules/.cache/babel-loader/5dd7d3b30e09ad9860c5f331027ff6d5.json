{"ast":null,"code":"import { LongTask } from \"../messages/index.js\";\n;\n;\nexport default function (app) {\n  if (!('PerformanceObserver' in window) || !('PerformanceLongTaskTiming' in window)) {\n    return;\n  }\n\n  const contexts = [\"unknown\", \"self\", \"same-origin-ancestor\", \"same-origin-descendant\", \"same-origin\", \"cross-origin-ancestor\", \"cross-origin-descendant\", \"cross-origin-unreachable\", \"multiple-contexts\"];\n  const containerTypes = [\"window\", \"iframe\", \"embed\", \"object\"];\n\n  function longTask(entry) {\n    let type = \"\",\n        src = \"\",\n        id = \"\",\n        name = \"\";\n    const container = entry.attribution[0];\n\n    if (container != null) {\n      type = container.containerType;\n      name = container.containerName;\n      id = container.containerId;\n      src = container.containerSrc;\n    }\n\n    app.send(new LongTask(entry.startTime + performance.timing.navigationStart, entry.duration, Math.max(contexts.indexOf(entry.name), 0), Math.max(containerTypes.indexOf(type), 0), name, id, src));\n  }\n\n  const observer = new PerformanceObserver(list => list.getEntries().forEach(longTask));\n  observer.observe({\n    entryTypes: ['longtask']\n  });\n}","map":{"version":3,"sources":["/Users/kushthakker/Downloads/imagecompare-both/node_modules/@openreplay/tracker/lib/modules/longtasks.js"],"names":["LongTask","app","window","contexts","containerTypes","longTask","entry","type","src","id","name","container","attribution","containerType","containerName","containerId","containerSrc","send","startTime","performance","timing","navigationStart","duration","Math","max","indexOf","observer","PerformanceObserver","list","getEntries","forEach","observe","entryTypes"],"mappings":"AAAA,SAASA,QAAT,QAAyB,sBAAzB;AACA;AACA;AACA,eAAe,UAAUC,GAAV,EAAe;AAC1B,MAAI,EAAE,yBAAyBC,MAA3B,KAAsC,EAAE,+BAA+BA,MAAjC,CAA1C,EAAoF;AAChF;AACH;;AACD,QAAMC,QAAQ,GAAG,CAAC,SAAD,EAAY,MAAZ,EAAoB,sBAApB,EAA4C,wBAA5C,EAAsE,aAAtE,EAAqF,uBAArF,EAA8G,yBAA9G,EAAyI,0BAAzI,EAAqK,mBAArK,CAAjB;AACA,QAAMC,cAAc,GAAG,CAAC,QAAD,EAAW,QAAX,EAAqB,OAArB,EAA8B,QAA9B,CAAvB;;AACA,WAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACrB,QAAIC,IAAI,GAAG,EAAX;AAAA,QAAeC,GAAG,GAAG,EAArB;AAAA,QAAyBC,EAAE,GAAG,EAA9B;AAAA,QAAkCC,IAAI,GAAG,EAAzC;AACA,UAAMC,SAAS,GAAGL,KAAK,CAACM,WAAN,CAAkB,CAAlB,CAAlB;;AACA,QAAID,SAAS,IAAI,IAAjB,EAAuB;AACnBJ,MAAAA,IAAI,GAAGI,SAAS,CAACE,aAAjB;AACAH,MAAAA,IAAI,GAAGC,SAAS,CAACG,aAAjB;AACAL,MAAAA,EAAE,GAAGE,SAAS,CAACI,WAAf;AACAP,MAAAA,GAAG,GAAGG,SAAS,CAACK,YAAhB;AACH;;AACDf,IAAAA,GAAG,CAACgB,IAAJ,CAAS,IAAIjB,QAAJ,CAAaM,KAAK,CAACY,SAAN,GAAkBC,WAAW,CAACC,MAAZ,CAAmBC,eAAlD,EAAmEf,KAAK,CAACgB,QAAzE,EAAmFC,IAAI,CAACC,GAAL,CAASrB,QAAQ,CAACsB,OAAT,CAAiBnB,KAAK,CAACI,IAAvB,CAAT,EAAuC,CAAvC,CAAnF,EAA8Ha,IAAI,CAACC,GAAL,CAASpB,cAAc,CAACqB,OAAf,CAAuBlB,IAAvB,CAAT,EAAuC,CAAvC,CAA9H,EAAyKG,IAAzK,EAA+KD,EAA/K,EAAmLD,GAAnL,CAAT;AACH;;AACD,QAAMkB,QAAQ,GAAG,IAAIC,mBAAJ,CAAyBC,IAAD,IAAUA,IAAI,CAACC,UAAL,GAAkBC,OAAlB,CAA0BzB,QAA1B,CAAlC,CAAjB;AACAqB,EAAAA,QAAQ,CAACK,OAAT,CAAiB;AAAEC,IAAAA,UAAU,EAAE,CAAC,UAAD;AAAd,GAAjB;AACH","sourcesContent":["import { LongTask } from \"../messages/index.js\";\n;\n;\nexport default function (app) {\n    if (!('PerformanceObserver' in window) || !('PerformanceLongTaskTiming' in window)) {\n        return;\n    }\n    const contexts = [\"unknown\", \"self\", \"same-origin-ancestor\", \"same-origin-descendant\", \"same-origin\", \"cross-origin-ancestor\", \"cross-origin-descendant\", \"cross-origin-unreachable\", \"multiple-contexts\"];\n    const containerTypes = [\"window\", \"iframe\", \"embed\", \"object\"];\n    function longTask(entry) {\n        let type = \"\", src = \"\", id = \"\", name = \"\";\n        const container = entry.attribution[0];\n        if (container != null) {\n            type = container.containerType;\n            name = container.containerName;\n            id = container.containerId;\n            src = container.containerSrc;\n        }\n        app.send(new LongTask(entry.startTime + performance.timing.navigationStart, entry.duration, Math.max(contexts.indexOf(entry.name), 0), Math.max(containerTypes.indexOf(type), 0), name, id, src));\n    }\n    const observer = new PerformanceObserver((list) => list.getEntries().forEach(longTask));\n    observer.observe({ entryTypes: ['longtask'] });\n}\n"]},"metadata":{},"sourceType":"module"}