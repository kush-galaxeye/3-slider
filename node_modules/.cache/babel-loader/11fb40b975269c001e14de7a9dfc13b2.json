{"ast":null,"code":"import { IN_BROWSER } from \"../utils.js\";\nimport { PerformanceTrack } from \"../messages/index.js\";\nconst perf = IN_BROWSER && 'performance' in window && 'memory' in performance // works in Chrome only\n? performance : {\n  memory: {}\n};\nexport const deviceMemory = IN_BROWSER ? (navigator.deviceMemory || 0) * 1024 : 0;\nexport const jsHeapSizeLimit = perf.memory.jsHeapSizeLimit || 0;\nexport default function (app, opts) {\n  const options = Object.assign({\n    capturePerformance: true\n  }, opts);\n\n  if (!options.capturePerformance) {\n    return;\n  }\n\n  let frames;\n  let ticks;\n\n  const nextFrame = () => {\n    if (frames === undefined || frames === -1) {\n      return;\n    }\n\n    frames++;\n    requestAnimationFrame(nextFrame);\n  };\n\n  app.ticker.attach(() => {\n    if (ticks === undefined || ticks === -1) {\n      return;\n    }\n\n    ticks++;\n  }, 0, false);\n\n  const sendPerformanceTrack = () => {\n    if (frames === undefined || ticks === undefined) {\n      return;\n    }\n\n    app.send(new PerformanceTrack(frames, ticks, perf.memory.totalJSHeapSize || 0, perf.memory.usedJSHeapSize || 0));\n    ticks = frames = document.hidden ? -1 : 0;\n  };\n\n  app.attachStartCallback(() => {\n    ticks = frames = -1;\n    sendPerformanceTrack();\n    nextFrame();\n  });\n  app.attachStopCallback(() => {\n    ticks = frames = undefined;\n  });\n  app.ticker.attach(sendPerformanceTrack, 40, false);\n\n  if (document.hidden !== undefined) {\n    app.attachEventListener(document, 'visibilitychange', sendPerformanceTrack, false, false);\n  }\n}","map":{"version":3,"sources":["/Users/kushthakker/Downloads/imagecompare-both/node_modules/@openreplay/tracker/lib/modules/performance.js"],"names":["IN_BROWSER","PerformanceTrack","perf","window","performance","memory","deviceMemory","navigator","jsHeapSizeLimit","app","opts","options","Object","assign","capturePerformance","frames","ticks","nextFrame","undefined","requestAnimationFrame","ticker","attach","sendPerformanceTrack","send","totalJSHeapSize","usedJSHeapSize","document","hidden","attachStartCallback","attachStopCallback","attachEventListener"],"mappings":"AAAA,SAASA,UAAT,QAA2B,aAA3B;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,MAAMC,IAAI,GAAGF,UAAU,IAAI,iBAAiBG,MAA/B,IAAyC,YAAYC,WAArD,CAAiE;AAAjE,EACPA,WADO,GAEP;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAFN;AAGA,OAAO,MAAMC,YAAY,GAAGN,UAAU,GAAG,CAACO,SAAS,CAACD,YAAV,IAA0B,CAA3B,IAAgC,IAAnC,GAA0C,CAAzE;AACP,OAAO,MAAME,eAAe,GAAGN,IAAI,CAACG,MAAL,CAAYG,eAAZ,IAA+B,CAAvD;AACP,eAAe,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AAChC,QAAMC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc;AAC1BC,IAAAA,kBAAkB,EAAE;AADM,GAAd,EAEbJ,IAFa,CAAhB;;AAGA,MAAI,CAACC,OAAO,CAACG,kBAAb,EAAiC;AAC7B;AACH;;AACD,MAAIC,MAAJ;AACA,MAAIC,KAAJ;;AACA,QAAMC,SAAS,GAAG,MAAM;AACpB,QAAIF,MAAM,KAAKG,SAAX,IAAwBH,MAAM,KAAK,CAAC,CAAxC,EAA2C;AACvC;AACH;;AACDA,IAAAA,MAAM;AACNI,IAAAA,qBAAqB,CAACF,SAAD,CAArB;AACH,GAND;;AAOAR,EAAAA,GAAG,CAACW,MAAJ,CAAWC,MAAX,CAAkB,MAAM;AACpB,QAAIL,KAAK,KAAKE,SAAV,IAAuBF,KAAK,KAAK,CAAC,CAAtC,EAAyC;AACrC;AACH;;AACDA,IAAAA,KAAK;AACR,GALD,EAKG,CALH,EAKM,KALN;;AAMA,QAAMM,oBAAoB,GAAG,MAAM;AAC/B,QAAIP,MAAM,KAAKG,SAAX,IAAwBF,KAAK,KAAKE,SAAtC,EAAiD;AAC7C;AACH;;AACDT,IAAAA,GAAG,CAACc,IAAJ,CAAS,IAAItB,gBAAJ,CAAqBc,MAArB,EAA6BC,KAA7B,EAAoCd,IAAI,CAACG,MAAL,CAAYmB,eAAZ,IAA+B,CAAnE,EAAsEtB,IAAI,CAACG,MAAL,CAAYoB,cAAZ,IAA8B,CAApG,CAAT;AACAT,IAAAA,KAAK,GAAGD,MAAM,GAAGW,QAAQ,CAACC,MAAT,GAAkB,CAAC,CAAnB,GAAuB,CAAxC;AACH,GAND;;AAOAlB,EAAAA,GAAG,CAACmB,mBAAJ,CAAwB,MAAM;AAC1BZ,IAAAA,KAAK,GAAGD,MAAM,GAAG,CAAC,CAAlB;AACAO,IAAAA,oBAAoB;AACpBL,IAAAA,SAAS;AACZ,GAJD;AAKAR,EAAAA,GAAG,CAACoB,kBAAJ,CAAuB,MAAM;AACzBb,IAAAA,KAAK,GAAGD,MAAM,GAAGG,SAAjB;AACH,GAFD;AAGAT,EAAAA,GAAG,CAACW,MAAJ,CAAWC,MAAX,CAAkBC,oBAAlB,EAAwC,EAAxC,EAA4C,KAA5C;;AACA,MAAII,QAAQ,CAACC,MAAT,KAAoBT,SAAxB,EAAmC;AAC/BT,IAAAA,GAAG,CAACqB,mBAAJ,CAAwBJ,QAAxB,EAAkC,kBAAlC,EAAsDJ,oBAAtD,EAA4E,KAA5E,EAAmF,KAAnF;AACH;AACJ","sourcesContent":["import { IN_BROWSER } from \"../utils.js\";\nimport { PerformanceTrack } from \"../messages/index.js\";\nconst perf = IN_BROWSER && 'performance' in window && 'memory' in performance // works in Chrome only\n    ? performance\n    : { memory: {} };\nexport const deviceMemory = IN_BROWSER ? (navigator.deviceMemory || 0) * 1024 : 0;\nexport const jsHeapSizeLimit = perf.memory.jsHeapSizeLimit || 0;\nexport default function (app, opts) {\n    const options = Object.assign({\n        capturePerformance: true,\n    }, opts);\n    if (!options.capturePerformance) {\n        return;\n    }\n    let frames;\n    let ticks;\n    const nextFrame = () => {\n        if (frames === undefined || frames === -1) {\n            return;\n        }\n        frames++;\n        requestAnimationFrame(nextFrame);\n    };\n    app.ticker.attach(() => {\n        if (ticks === undefined || ticks === -1) {\n            return;\n        }\n        ticks++;\n    }, 0, false);\n    const sendPerformanceTrack = () => {\n        if (frames === undefined || ticks === undefined) {\n            return;\n        }\n        app.send(new PerformanceTrack(frames, ticks, perf.memory.totalJSHeapSize || 0, perf.memory.usedJSHeapSize || 0));\n        ticks = frames = document.hidden ? -1 : 0;\n    };\n    app.attachStartCallback(() => {\n        ticks = frames = -1;\n        sendPerformanceTrack();\n        nextFrame();\n    });\n    app.attachStopCallback(() => {\n        ticks = frames = undefined;\n    });\n    app.ticker.attach(sendPerformanceTrack, 40, false);\n    if (document.hidden !== undefined) {\n        app.attachEventListener(document, 'visibilitychange', sendPerformanceTrack, false, false);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}