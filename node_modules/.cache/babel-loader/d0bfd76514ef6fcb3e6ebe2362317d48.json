{"ast":null,"code":"import { IN_BROWSER } from \"../utils.js\";\nimport { ConsoleLog } from \"../messages/index.js\";\nconst printError = IN_BROWSER && 'InstallTrigger' in window // detect Firefox\n? e => e.message + '\\n' + e.stack : e => e.stack || e.message;\n\nfunction printString(arg) {\n  if (arg === undefined) {\n    return 'undefined';\n  }\n\n  if (arg === null) {\n    return 'null';\n  }\n\n  if (arg instanceof Error) {\n    return printError(arg);\n  }\n\n  if (Array.isArray(arg)) {\n    return `Array(${arg.length})`;\n  }\n\n  return arg.toString();\n}\n\nfunction printFloat(arg) {\n  if (typeof arg !== 'number') return 'NaN';\n  return arg.toString();\n}\n\nfunction printInt(arg) {\n  if (typeof arg !== 'number') return 'NaN';\n  return Math.floor(arg).toString();\n}\n\nfunction printObject(arg) {\n  if (arg === undefined) {\n    return 'undefined';\n  }\n\n  if (arg === null) {\n    return 'null';\n  }\n\n  if (arg instanceof Error) {\n    return printError(arg);\n  }\n\n  if (Array.isArray(arg)) {\n    const length = arg.length;\n    const values = arg.slice(0, 10).map(printString).join(', ');\n    return `Array(${length})[${values}]`;\n  }\n\n  if (typeof arg === 'object') {\n    const res = [];\n    let i = 0;\n\n    for (const k in arg) {\n      if (++i === 10) {\n        break;\n      }\n\n      const v = arg[k];\n      res.push(k + ': ' + printString(v));\n    }\n\n    return '{' + res.join(', ') + '}';\n  }\n\n  return arg.toString();\n}\n\nfunction printf(args) {\n  if (typeof args[0] === 'string') {\n    args.unshift(args.shift().replace(/%(o|s|f|d|i)/g, (s, t) => {\n      const arg = args.shift();\n      if (arg === undefined) return s;\n\n      switch (t) {\n        case 'o':\n          return printObject(arg);\n\n        case 's':\n          return printString(arg);\n\n        case 'f':\n          return printFloat(arg);\n\n        case 'd':\n        case 'i':\n          return printInt(arg);\n\n        default:\n          return s;\n      }\n    }));\n  }\n\n  return args.map(printObject).join(' ');\n}\n\nconst consoleMethods = ['log', 'info', 'warn', 'error', 'debug', 'assert'];\nexport default function (app, opts) {\n  const options = Object.assign({\n    consoleMethods,\n    consoleThrottling: 30\n  }, opts);\n\n  if (!Array.isArray(options.consoleMethods) || options.consoleMethods.length === 0) {\n    return;\n  }\n\n  const sendConsoleLog = app.safe((level, args) => app.send(new ConsoleLog(level, printf(args))));\n  let n;\n\n  const reset = () => {\n    n = 0;\n  };\n\n  app.attachStartCallback(reset);\n  app.ticker.attach(reset, 33, false);\n\n  const patchConsole = console => options.consoleMethods.forEach(method => {\n    if (consoleMethods.indexOf(method) === -1) {\n      console.error(`OpenReplay: unsupported console method \"${method}\"`);\n      return;\n    }\n\n    const fn = console[method];\n\n    console[method] = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      fn.apply(this, args);\n\n      if (n++ > options.consoleThrottling) {\n        return;\n      }\n\n      sendConsoleLog(method, args);\n    };\n  });\n\n  patchConsole(window.console);\n  app.nodes.attachNodeCallback(app.safe(node => {\n    if (node instanceof HTMLIFrameElement) {\n      let context = node.contentWindow;\n\n      if (context) {\n        patchConsole(context.console);\n      }\n\n      app.attachEventListener(node, \"load\", () => {\n        if (node.contentWindow !== context) {\n          context = node.contentWindow;\n          patchConsole(context.console);\n        }\n      });\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/kushthakker/Downloads/imagecompare-both/node_modules/@openreplay/tracker/lib/modules/console.js"],"names":["IN_BROWSER","ConsoleLog","printError","window","e","message","stack","printString","arg","undefined","Error","Array","isArray","length","toString","printFloat","printInt","Math","floor","printObject","values","slice","map","join","res","i","k","v","push","printf","args","unshift","shift","replace","s","t","consoleMethods","app","opts","options","Object","assign","consoleThrottling","sendConsoleLog","safe","level","send","n","reset","attachStartCallback","ticker","attach","patchConsole","console","forEach","method","indexOf","error","fn","apply","nodes","attachNodeCallback","node","HTMLIFrameElement","context","contentWindow","attachEventListener"],"mappings":"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","sourcesContent":["import { IN_BROWSER } from \"../utils.js\";\nimport { ConsoleLog } from \"../messages/index.js\";\nconst printError = IN_BROWSER && 'InstallTrigger' in window // detect Firefox\n    ? (e) => e.message + '\\n' + e.stack\n    : (e) => e.stack || e.message;\nfunction printString(arg) {\n    if (arg === undefined) {\n        return 'undefined';\n    }\n    if (arg === null) {\n        return 'null';\n    }\n    if (arg instanceof Error) {\n        return printError(arg);\n    }\n    if (Array.isArray(arg)) {\n        return `Array(${arg.length})`;\n    }\n    return arg.toString();\n}\nfunction printFloat(arg) {\n    if (typeof arg !== 'number')\n        return 'NaN';\n    return arg.toString();\n}\nfunction printInt(arg) {\n    if (typeof arg !== 'number')\n        return 'NaN';\n    return Math.floor(arg).toString();\n}\nfunction printObject(arg) {\n    if (arg === undefined) {\n        return 'undefined';\n    }\n    if (arg === null) {\n        return 'null';\n    }\n    if (arg instanceof Error) {\n        return printError(arg);\n    }\n    if (Array.isArray(arg)) {\n        const length = arg.length;\n        const values = arg.slice(0, 10).map(printString).join(', ');\n        return `Array(${length})[${values}]`;\n    }\n    if (typeof arg === 'object') {\n        const res = [];\n        let i = 0;\n        for (const k in arg) {\n            if (++i === 10) {\n                break;\n            }\n            const v = arg[k];\n            res.push(k + ': ' + printString(v));\n        }\n        return '{' + res.join(', ') + '}';\n    }\n    return arg.toString();\n}\nfunction printf(args) {\n    if (typeof args[0] === 'string') {\n        args.unshift(args.shift().replace(/%(o|s|f|d|i)/g, (s, t) => {\n            const arg = args.shift();\n            if (arg === undefined)\n                return s;\n            switch (t) {\n                case 'o':\n                    return printObject(arg);\n                case 's':\n                    return printString(arg);\n                case 'f':\n                    return printFloat(arg);\n                case 'd':\n                case 'i':\n                    return printInt(arg);\n                default:\n                    return s;\n            }\n        }));\n    }\n    return args.map(printObject).join(' ');\n}\nconst consoleMethods = ['log', 'info', 'warn', 'error', 'debug', 'assert'];\nexport default function (app, opts) {\n    const options = Object.assign({\n        consoleMethods,\n        consoleThrottling: 30,\n    }, opts);\n    if (!Array.isArray(options.consoleMethods) ||\n        options.consoleMethods.length === 0) {\n        return;\n    }\n    const sendConsoleLog = app.safe((level, args) => app.send(new ConsoleLog(level, printf(args))));\n    let n;\n    const reset = () => {\n        n = 0;\n    };\n    app.attachStartCallback(reset);\n    app.ticker.attach(reset, 33, false);\n    const patchConsole = (console) => options.consoleMethods.forEach((method) => {\n        if (consoleMethods.indexOf(method) === -1) {\n            console.error(`OpenReplay: unsupported console method \"${method}\"`);\n            return;\n        }\n        const fn = console[method];\n        console[method] = function (...args) {\n            fn.apply(this, args);\n            if (n++ > options.consoleThrottling) {\n                return;\n            }\n            sendConsoleLog(method, args);\n        };\n    });\n    patchConsole(window.console);\n    app.nodes.attachNodeCallback(app.safe(node => {\n        if (node instanceof HTMLIFrameElement) {\n            let context = node.contentWindow;\n            if (context) {\n                patchConsole(context.console);\n            }\n            app.attachEventListener(node, \"load\", () => {\n                if (node.contentWindow !== context) {\n                    context = node.contentWindow;\n                    patchConsole(context.console);\n                }\n            });\n        }\n    }));\n}\n"]},"metadata":{},"sourceType":"module"}