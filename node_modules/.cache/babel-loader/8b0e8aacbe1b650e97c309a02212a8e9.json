{"ast":null,"code":"export default class Nodes {\n  constructor(node_id) {\n    this.node_id = node_id;\n    this.nodes = [];\n    this.nodeCallbacks = [];\n    this.elementListeners = new Map();\n  }\n\n  attachNodeCallback(nodeCallback) {\n    this.nodeCallbacks.push(nodeCallback);\n  }\n\n  attachElementListener(type, node, elementListener) {\n    const id = this.getID(node);\n\n    if (id === undefined) {\n      return;\n    }\n\n    node.addEventListener(type, elementListener);\n    let listeners = this.elementListeners.get(id);\n\n    if (listeners === undefined) {\n      listeners = [];\n      this.elementListeners.set(id, listeners);\n      return;\n    }\n\n    listeners.push([type, elementListener]);\n  }\n\n  registerNode(node) {\n    let id = node[this.node_id];\n    const isNew = id === undefined;\n\n    if (isNew) {\n      id = this.nodes.length;\n      this.nodes[id] = node;\n      node[this.node_id] = id;\n    }\n\n    return [id, isNew];\n  }\n\n  unregisterNode(node) {\n    const id = node[this.node_id];\n\n    if (id !== undefined) {\n      delete node[this.node_id];\n      this.nodes[id] = undefined;\n      const listeners = this.elementListeners.get(id);\n\n      if (listeners !== undefined) {\n        this.elementListeners.delete(id);\n        listeners.forEach(listener => node.removeEventListener(listener[0], listener[1]));\n      }\n    }\n\n    return id;\n  }\n\n  callNodeCallbacks(node) {\n    this.nodeCallbacks.forEach(cb => cb(node));\n  }\n\n  getID(node) {\n    return node[this.node_id];\n  }\n\n  getNode(id) {\n    return this.nodes[id];\n  }\n\n  clear() {\n    for (let id = 0; id < this.nodes.length; id++) {\n      const node = this.nodes[id];\n\n      if (node === undefined) {\n        continue;\n      }\n\n      this.unregisterNode(node);\n    }\n\n    this.nodes.length = 0;\n  }\n\n}","map":{"version":3,"sources":["/Users/kushthakker/Downloads/imagecompare-both/node_modules/@openreplay/tracker/lib/app/nodes.js"],"names":["Nodes","constructor","node_id","nodes","nodeCallbacks","elementListeners","Map","attachNodeCallback","nodeCallback","push","attachElementListener","type","node","elementListener","id","getID","undefined","addEventListener","listeners","get","set","registerNode","isNew","length","unregisterNode","delete","forEach","listener","removeEventListener","callNodeCallbacks","cb","getNode","clear"],"mappings":"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","sourcesContent":["export default class Nodes {\n    constructor(node_id) {\n        this.node_id = node_id;\n        this.nodes = [];\n        this.nodeCallbacks = [];\n        this.elementListeners = new Map();\n    }\n    attachNodeCallback(nodeCallback) {\n        this.nodeCallbacks.push(nodeCallback);\n    }\n    attachElementListener(type, node, elementListener) {\n        const id = this.getID(node);\n        if (id === undefined) {\n            return;\n        }\n        node.addEventListener(type, elementListener);\n        let listeners = this.elementListeners.get(id);\n        if (listeners === undefined) {\n            listeners = [];\n            this.elementListeners.set(id, listeners);\n            return;\n        }\n        listeners.push([type, elementListener]);\n    }\n    registerNode(node) {\n        let id = node[this.node_id];\n        const isNew = id === undefined;\n        if (isNew) {\n            id = this.nodes.length;\n            this.nodes[id] = node;\n            node[this.node_id] = id;\n        }\n        return [id, isNew];\n    }\n    unregisterNode(node) {\n        const id = node[this.node_id];\n        if (id !== undefined) {\n            delete node[this.node_id];\n            this.nodes[id] = undefined;\n            const listeners = this.elementListeners.get(id);\n            if (listeners !== undefined) {\n                this.elementListeners.delete(id);\n                listeners.forEach((listener) => node.removeEventListener(listener[0], listener[1]));\n            }\n        }\n        return id;\n    }\n    callNodeCallbacks(node) {\n        this.nodeCallbacks.forEach((cb) => cb(node));\n    }\n    getID(node) {\n        return node[this.node_id];\n    }\n    getNode(id) {\n        return this.nodes[id];\n    }\n    clear() {\n        for (let id = 0; id < this.nodes.length; id++) {\n            const node = this.nodes[id];\n            if (node === undefined) {\n                continue;\n            }\n            this.unregisterNode(node);\n        }\n        this.nodes.length = 0;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}