{"ast":null,"code":"import { timestamp, isURL } from \"../utils.js\";\nimport { ResourceTiming, SetNodeAttributeURLBased } from \"../messages/index.js\";\nexport default function (app) {\n  const sendImgSrc = app.safe(function () {\n    const id = app.nodes.getID(this);\n\n    if (id === undefined) {\n      return;\n    }\n\n    const {\n      src,\n      complete,\n      naturalWidth,\n      naturalHeight\n    } = this;\n\n    if (!complete) {\n      return;\n    }\n\n    if (naturalWidth === 0 && naturalHeight === 0) {\n      if (src != null && isURL(src)) {\n        // TODO: How about relative urls ? Src type is null sometimes.\n        app.send(new ResourceTiming(timestamp(), 0, 0, 0, 0, 0, src, 'img'));\n      }\n    } else if (src.length < 1e5) {\n      app.send(new SetNodeAttributeURLBased(id, 'src', src, app.getBaseHref()));\n    }\n  });\n  const observer = new MutationObserver(mutations => {\n    for (const mutation of mutations) {\n      if (mutation.type === \"attributes\" && mutation.attributeName === \"src\") {\n        const target = mutation.target;\n        const id = app.nodes.getID(target);\n\n        if (id === undefined) {\n          return;\n        }\n\n        const src = target.src;\n        app.send(new SetNodeAttributeURLBased(id, 'src', src, app.getBaseHref()));\n      }\n    }\n  });\n  app.nodes.attachNodeCallback(node => {\n    if (!(node instanceof HTMLImageElement)) {\n      return;\n    }\n\n    app.nodes.attachElementListener('error', node, sendImgSrc);\n    app.nodes.attachElementListener('load', node, sendImgSrc);\n    sendImgSrc.call(node);\n    observer.observe(node, {\n      attributes: true\n    });\n  });\n}","map":{"version":3,"sources":["/Users/kushthakker/Downloads/imagecompare-both/node_modules/@openreplay/tracker/lib/modules/img.js"],"names":["timestamp","isURL","ResourceTiming","SetNodeAttributeURLBased","app","sendImgSrc","safe","id","nodes","getID","undefined","src","complete","naturalWidth","naturalHeight","send","length","getBaseHref","observer","MutationObserver","mutations","mutation","type","attributeName","target","attachNodeCallback","node","HTMLImageElement","attachElementListener","call","observe","attributes"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,KAApB,QAAiC,aAAjC;AACA,SAASC,cAAT,EAAyBC,wBAAzB,QAAyD,sBAAzD;AACA,eAAe,UAAUC,GAAV,EAAe;AAC1B,QAAMC,UAAU,GAAGD,GAAG,CAACE,IAAJ,CAAS,YAAY;AACpC,UAAMC,EAAE,GAAGH,GAAG,CAACI,KAAJ,CAAUC,KAAV,CAAgB,IAAhB,CAAX;;AACA,QAAIF,EAAE,KAAKG,SAAX,EAAsB;AAClB;AACH;;AACD,UAAM;AAAEC,MAAAA,GAAF;AAAOC,MAAAA,QAAP;AAAiBC,MAAAA,YAAjB;AAA+BC,MAAAA;AAA/B,QAAiD,IAAvD;;AACA,QAAI,CAACF,QAAL,EAAe;AACX;AACH;;AACD,QAAIC,YAAY,KAAK,CAAjB,IAAsBC,aAAa,KAAK,CAA5C,EAA+C;AAC3C,UAAIH,GAAG,IAAI,IAAP,IAAeV,KAAK,CAACU,GAAD,CAAxB,EAA+B;AAAE;AAC7BP,QAAAA,GAAG,CAACW,IAAJ,CAAS,IAAIb,cAAJ,CAAmBF,SAAS,EAA5B,EAAgC,CAAhC,EAAmC,CAAnC,EAAsC,CAAtC,EAAyC,CAAzC,EAA4C,CAA5C,EAA+CW,GAA/C,EAAoD,KAApD,CAAT;AACH;AACJ,KAJD,MAKK,IAAIA,GAAG,CAACK,MAAJ,GAAa,GAAjB,EAAsB;AACvBZ,MAAAA,GAAG,CAACW,IAAJ,CAAS,IAAIZ,wBAAJ,CAA6BI,EAA7B,EAAiC,KAAjC,EAAwCI,GAAxC,EAA6CP,GAAG,CAACa,WAAJ,EAA7C,CAAT;AACH;AACJ,GAjBkB,CAAnB;AAkBA,QAAMC,QAAQ,GAAG,IAAIC,gBAAJ,CAAsBC,SAAD,IAAe;AACjD,SAAK,MAAMC,QAAX,IAAuBD,SAAvB,EAAkC;AAC9B,UAAIC,QAAQ,CAACC,IAAT,KAAkB,YAAlB,IAAkCD,QAAQ,CAACE,aAAT,KAA2B,KAAjE,EAAwE;AACpE,cAAMC,MAAM,GAAGH,QAAQ,CAACG,MAAxB;AACA,cAAMjB,EAAE,GAAGH,GAAG,CAACI,KAAJ,CAAUC,KAAV,CAAgBe,MAAhB,CAAX;;AACA,YAAIjB,EAAE,KAAKG,SAAX,EAAsB;AAClB;AACH;;AACD,cAAMC,GAAG,GAAGa,MAAM,CAACb,GAAnB;AACAP,QAAAA,GAAG,CAACW,IAAJ,CAAS,IAAIZ,wBAAJ,CAA6BI,EAA7B,EAAiC,KAAjC,EAAwCI,GAAxC,EAA6CP,GAAG,CAACa,WAAJ,EAA7C,CAAT;AACH;AACJ;AACJ,GAZgB,CAAjB;AAaAb,EAAAA,GAAG,CAACI,KAAJ,CAAUiB,kBAAV,CAA8BC,IAAD,IAAU;AACnC,QAAI,EAAEA,IAAI,YAAYC,gBAAlB,CAAJ,EAAyC;AACrC;AACH;;AACDvB,IAAAA,GAAG,CAACI,KAAJ,CAAUoB,qBAAV,CAAgC,OAAhC,EAAyCF,IAAzC,EAA+CrB,UAA/C;AACAD,IAAAA,GAAG,CAACI,KAAJ,CAAUoB,qBAAV,CAAgC,MAAhC,EAAwCF,IAAxC,EAA8CrB,UAA9C;AACAA,IAAAA,UAAU,CAACwB,IAAX,CAAgBH,IAAhB;AACAR,IAAAA,QAAQ,CAACY,OAAT,CAAiBJ,IAAjB,EAAuB;AAAEK,MAAAA,UAAU,EAAE;AAAd,KAAvB;AACH,GARD;AASH","sourcesContent":["import { timestamp, isURL } from \"../utils.js\";\nimport { ResourceTiming, SetNodeAttributeURLBased } from \"../messages/index.js\";\nexport default function (app) {\n    const sendImgSrc = app.safe(function () {\n        const id = app.nodes.getID(this);\n        if (id === undefined) {\n            return;\n        }\n        const { src, complete, naturalWidth, naturalHeight } = this;\n        if (!complete) {\n            return;\n        }\n        if (naturalWidth === 0 && naturalHeight === 0) {\n            if (src != null && isURL(src)) { // TODO: How about relative urls ? Src type is null sometimes.\n                app.send(new ResourceTiming(timestamp(), 0, 0, 0, 0, 0, src, 'img'));\n            }\n        }\n        else if (src.length < 1e5) {\n            app.send(new SetNodeAttributeURLBased(id, 'src', src, app.getBaseHref()));\n        }\n    });\n    const observer = new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type === \"attributes\" && mutation.attributeName === \"src\") {\n                const target = mutation.target;\n                const id = app.nodes.getID(target);\n                if (id === undefined) {\n                    return;\n                }\n                const src = target.src;\n                app.send(new SetNodeAttributeURLBased(id, 'src', src, app.getBaseHref()));\n            }\n        }\n    });\n    app.nodes.attachNodeCallback((node) => {\n        if (!(node instanceof HTMLImageElement)) {\n            return;\n        }\n        app.nodes.attachElementListener('error', node, sendImgSrc);\n        app.nodes.attachElementListener('load', node, sendImgSrc);\n        sendImgSrc.call(node);\n        observer.observe(node, { attributes: true });\n    });\n}\n"]},"metadata":{},"sourceType":"module"}