{"ast":null,"code":"import App, { DEFAULT_INGEST_POINT } from \"./app/index.js\";\nexport { default as App } from './app/index.js';\nimport { UserID, UserAnonymousID, Metadata, RawCustomEvent, CustomIssue } from \"./messages/index.js\";\nimport * as _Messages from \"./messages/index.js\";\nexport const Messages = _Messages;\nimport Connection from \"./modules/connection.js\";\nimport Console from \"./modules/console.js\";\nimport Exception, { getExceptionMessageFromEvent, getExceptionMessage } from \"./modules/exception.js\";\nimport Img from \"./modules/img.js\";\nimport Input from \"./modules/input.js\";\nimport Mouse from \"./modules/mouse.js\";\nimport Timing from \"./modules/timing.js\";\nimport Performance from \"./modules/performance.js\";\nimport Scroll from \"./modules/scroll.js\";\nimport Viewport from \"./modules/viewport.js\";\nimport Longtasks from \"./modules/longtasks.js\";\nimport CSSRules from \"./modules/cssrules.js\";\nimport { IN_BROWSER, deprecationWarn, DOCS_HOST } from \"./utils.js\";\nconst DOCS_SETUP = '/installation/setup-or';\n\nfunction processOptions(obj) {\n  if (obj == null) {\n    console.error(`OpenReplay: invalid options argument type. Please, check documentation on ${DOCS_HOST}${DOCS_SETUP}`);\n    return false;\n  }\n\n  if (typeof obj.projectKey !== 'string') {\n    if (typeof obj.projectKey !== 'number') {\n      if (typeof obj.projectID !== 'number') {\n        // Back compatability\n        console.error(`OpenReplay: projectKey is missing or wrong type (string is expected). Please, check ${DOCS_HOST}${DOCS_SETUP} for more information.`);\n        return false;\n      } else {\n        obj.projectKey = obj.projectID.toString();\n        deprecationWarn(\"`projectID` option\", \"`projectKey` option\", DOCS_SETUP);\n      }\n    } else {\n      console.warn(\"OpenReplay: projectKey is expected to have a string type.\");\n      obj.projectKey = obj.projectKey.toString();\n    }\n  }\n\n  if (typeof obj.sessionToken !== 'string' && obj.sessionToken != null) {\n    console.warn(`OpenReplay: invalid options argument type. Please, check documentation on ${DOCS_HOST}${DOCS_SETUP}`);\n  }\n\n  return true;\n}\n\nexport default class API {\n  constructor(options) {\n    this.options = options;\n    this.app = null;\n\n    this.handleError = e => {\n      if (this.app === null) {\n        return;\n      }\n\n      if (e instanceof Error) {\n        this.app.send(getExceptionMessage(e, []));\n      } else if (e instanceof ErrorEvent || 'PromiseRejectionEvent' in window && e instanceof PromiseRejectionEvent) {\n        const msg = getExceptionMessageFromEvent(e);\n\n        if (msg != null) {\n          this.app.send(msg);\n        }\n      }\n    };\n\n    if (!IN_BROWSER || !processOptions(options)) {\n      return;\n    }\n\n    if (window.__OPENREPLAY__) {\n      console.error(\"OpenReplay: one tracker instance has been initialised already\");\n      return;\n    }\n\n    if (!options.__DISABLE_SECURE_MODE && location.protocol !== 'https:') {\n      console.error(\"OpenReplay: Your website must be publicly accessible and running on SSL in order for OpenReplay to properly capture and replay the user session. You can disable this check by setting `__DISABLE_SECURE_MODE` option to `true` if you are testing in localhost. Keep in mind, that asset files on a local machine are not available to the outside world. This might affect tracking if you use css files.\");\n      return;\n    }\n\n    const doNotTrack = options.respectDoNotTrack && (navigator.doNotTrack == '1' // @ts-ignore\n    || window.doNotTrack == '1');\n    this.app = doNotTrack || !('Map' in window) || !('Set' in window) || !('MutationObserver' in window) || !('performance' in window) || !('timing' in performance) || !('startsWith' in String.prototype) || !('Blob' in window) || !('Worker' in window) ? null : new App(options.projectKey, options.sessionToken, options);\n\n    if (this.app !== null) {\n      Viewport(this.app);\n      CSSRules(this.app);\n      Connection(this.app);\n      Console(this.app, options);\n      Exception(this.app, options);\n      Img(this.app);\n      Input(this.app, options);\n      Mouse(this.app);\n      Timing(this.app, options);\n      Performance(this.app, options);\n      Scroll(this.app);\n      Longtasks(this.app);\n      window.__OPENREPLAY__ = this;\n    } else {\n      console.log(\"OpenReplay: browser doesn't support API required for tracking or doNotTrack is set to 1.\");\n      const req = new XMLHttpRequest();\n      const orig = options.ingestPoint || DEFAULT_INGEST_POINT;\n      req.open(\"POST\", orig + \"/v1/web/not-started\"); // no-cors issue only with text/plain or not-set Content-Type\n      // req.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n\n      req.send(JSON.stringify({\n        trackerVersion: '3.4.16',\n        projectKey: options.projectKey,\n        doNotTrack // TODO: add precise reason (an exact API missing)\n\n      }));\n    }\n  }\n\n  use(fn) {\n    return fn(this.app, this.options);\n  }\n\n  isActive() {\n    if (this.app === null) {\n      return false;\n    }\n\n    return this.app.active();\n  }\n\n  active() {\n    deprecationWarn(\"'active' method\", \"'isActive' method\", \"/\");\n    return this.isActive();\n  }\n\n  start() {\n    if (!IN_BROWSER) {\n      console.error(`OpenReplay: you are trying to start Tracker on a node.js environment. If you want to use OpenReplay with SSR, please, use componentDidMount or useEffect API for placing the \\`tracker.start()\\` line. Check documentation on ${DOCS_HOST}${DOCS_SETUP}`);\n      return Promise.reject(\"Trying to start not in browser.\");\n    }\n\n    if (this.app === null) {\n      return Promise.reject(\"Browser doesn't support required api, or doNotTrack is active.\");\n    }\n\n    return this.app.start();\n  }\n\n  stop() {\n    if (this.app === null) {\n      return;\n    }\n\n    this.app.stop();\n  }\n\n  getSessionToken() {\n    if (this.app === null) {\n      return null;\n    }\n\n    return this.app.getSessionToken();\n  }\n\n  getSessionID() {\n    if (this.app === null) {\n      return null;\n    }\n\n    return this.app.getSessionID();\n  }\n\n  sessionID() {\n    deprecationWarn(\"'sessionID' method\", \"'getSessionID' method\", \"/\");\n    return this.getSessionID();\n  }\n\n  setUserID(id) {\n    if (typeof id === 'string' && this.app !== null) {\n      this.app.send(new UserID(id));\n    }\n  }\n\n  userID(id) {\n    deprecationWarn(\"'userID' method\", \"'setUserID' method\", \"/\");\n    this.setUserID(id);\n  }\n\n  setUserAnonymousID(id) {\n    if (typeof id === 'string' && this.app !== null) {\n      this.app.send(new UserAnonymousID(id));\n    }\n  }\n\n  userAnonymousID(id) {\n    deprecationWarn(\"'userAnonymousID' method\", \"'setUserAnonymousID' method\", \"/\");\n    this.setUserAnonymousID(id);\n  }\n\n  setMetadata(key, value) {\n    if (typeof key === 'string' && typeof value === 'string' && this.app !== null) {\n      this.app.send(new Metadata(key, value));\n    }\n  }\n\n  metadata(key, value) {\n    deprecationWarn(\"'metadata' method\", \"'setMetadata' method\", \"/\");\n    this.setMetadata(key, value);\n  }\n\n  event(key, payload) {\n    let issue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (typeof key === 'string' && this.app !== null) {\n      if (issue) {\n        return this.issue(key, payload);\n      } else {\n        try {\n          payload = JSON.stringify(payload);\n        } catch (e) {\n          return;\n        }\n\n        this.app.send(new RawCustomEvent(key, payload));\n      }\n    }\n  }\n\n  issue(key, payload) {\n    if (typeof key === 'string' && this.app !== null) {\n      try {\n        payload = JSON.stringify(payload);\n      } catch (e) {\n        return;\n      }\n\n      this.app.send(new CustomIssue(key, payload));\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/kushthakker/Downloads/imagecompare-both/node_modules/@openreplay/tracker/lib/index.js"],"names":["App","DEFAULT_INGEST_POINT","default","UserID","UserAnonymousID","Metadata","RawCustomEvent","CustomIssue","_Messages","Messages","Connection","Console","Exception","getExceptionMessageFromEvent","getExceptionMessage","Img","Input","Mouse","Timing","Performance","Scroll","Viewport","Longtasks","CSSRules","IN_BROWSER","deprecationWarn","DOCS_HOST","DOCS_SETUP","processOptions","obj","console","error","projectKey","projectID","toString","warn","sessionToken","API","constructor","options","app","handleError","e","Error","send","ErrorEvent","window","PromiseRejectionEvent","msg","__OPENREPLAY__","__DISABLE_SECURE_MODE","location","protocol","doNotTrack","respectDoNotTrack","navigator","performance","String","prototype","log","req","XMLHttpRequest","orig","ingestPoint","open","JSON","stringify","trackerVersion","use","fn","isActive","active","start","Promise","reject","stop","getSessionToken","getSessionID","sessionID","setUserID","id","userID","setUserAnonymousID","userAnonymousID","setMetadata","key","value","metadata","event","payload","issue"],"mappings":"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","sourcesContent":["import App, { DEFAULT_INGEST_POINT } from \"./app/index.js\";\nexport { default as App } from './app/index.js';\nimport { UserID, UserAnonymousID, Metadata, RawCustomEvent, CustomIssue } from \"./messages/index.js\";\nimport * as _Messages from \"./messages/index.js\";\nexport const Messages = _Messages;\nimport Connection from \"./modules/connection.js\";\nimport Console from \"./modules/console.js\";\nimport Exception, { getExceptionMessageFromEvent, getExceptionMessage } from \"./modules/exception.js\";\nimport Img from \"./modules/img.js\";\nimport Input from \"./modules/input.js\";\nimport Mouse from \"./modules/mouse.js\";\nimport Timing from \"./modules/timing.js\";\nimport Performance from \"./modules/performance.js\";\nimport Scroll from \"./modules/scroll.js\";\nimport Viewport from \"./modules/viewport.js\";\nimport Longtasks from \"./modules/longtasks.js\";\nimport CSSRules from \"./modules/cssrules.js\";\nimport { IN_BROWSER, deprecationWarn, DOCS_HOST } from \"./utils.js\";\nconst DOCS_SETUP = '/installation/setup-or';\nfunction processOptions(obj) {\n    if (obj == null) {\n        console.error(`OpenReplay: invalid options argument type. Please, check documentation on ${DOCS_HOST}${DOCS_SETUP}`);\n        return false;\n    }\n    if (typeof obj.projectKey !== 'string') {\n        if (typeof obj.projectKey !== 'number') {\n            if (typeof obj.projectID !== 'number') { // Back compatability\n                console.error(`OpenReplay: projectKey is missing or wrong type (string is expected). Please, check ${DOCS_HOST}${DOCS_SETUP} for more information.`);\n                return false;\n            }\n            else {\n                obj.projectKey = obj.projectID.toString();\n                deprecationWarn(\"`projectID` option\", \"`projectKey` option\", DOCS_SETUP);\n            }\n        }\n        else {\n            console.warn(\"OpenReplay: projectKey is expected to have a string type.\");\n            obj.projectKey = obj.projectKey.toString();\n        }\n    }\n    if (typeof obj.sessionToken !== 'string' && obj.sessionToken != null) {\n        console.warn(`OpenReplay: invalid options argument type. Please, check documentation on ${DOCS_HOST}${DOCS_SETUP}`);\n    }\n    return true;\n}\nexport default class API {\n    constructor(options) {\n        this.options = options;\n        this.app = null;\n        this.handleError = (e) => {\n            if (this.app === null) {\n                return;\n            }\n            if (e instanceof Error) {\n                this.app.send(getExceptionMessage(e, []));\n            }\n            else if (e instanceof ErrorEvent ||\n                ('PromiseRejectionEvent' in window && e instanceof PromiseRejectionEvent)) {\n                const msg = getExceptionMessageFromEvent(e);\n                if (msg != null) {\n                    this.app.send(msg);\n                }\n            }\n        };\n        if (!IN_BROWSER || !processOptions(options)) {\n            return;\n        }\n        if (window.__OPENREPLAY__) {\n            console.error(\"OpenReplay: one tracker instance has been initialised already\");\n            return;\n        }\n        if (!options.__DISABLE_SECURE_MODE && location.protocol !== 'https:') {\n            console.error(\"OpenReplay: Your website must be publicly accessible and running on SSL in order for OpenReplay to properly capture and replay the user session. You can disable this check by setting `__DISABLE_SECURE_MODE` option to `true` if you are testing in localhost. Keep in mind, that asset files on a local machine are not available to the outside world. This might affect tracking if you use css files.\");\n            return;\n        }\n        const doNotTrack = options.respectDoNotTrack &&\n            (navigator.doNotTrack == '1'\n                // @ts-ignore\n                || window.doNotTrack == '1');\n        this.app = doNotTrack ||\n            !('Map' in window) ||\n            !('Set' in window) ||\n            !('MutationObserver' in window) ||\n            !('performance' in window) ||\n            !('timing' in performance) ||\n            !('startsWith' in String.prototype) ||\n            !('Blob' in window) ||\n            !('Worker' in window)\n            ? null\n            : new App(options.projectKey, options.sessionToken, options);\n        if (this.app !== null) {\n            Viewport(this.app);\n            CSSRules(this.app);\n            Connection(this.app);\n            Console(this.app, options);\n            Exception(this.app, options);\n            Img(this.app);\n            Input(this.app, options);\n            Mouse(this.app);\n            Timing(this.app, options);\n            Performance(this.app, options);\n            Scroll(this.app);\n            Longtasks(this.app);\n            window.__OPENREPLAY__ = this;\n        }\n        else {\n            console.log(\"OpenReplay: browser doesn't support API required for tracking or doNotTrack is set to 1.\");\n            const req = new XMLHttpRequest();\n            const orig = options.ingestPoint || DEFAULT_INGEST_POINT;\n            req.open(\"POST\", orig + \"/v1/web/not-started\");\n            // no-cors issue only with text/plain or not-set Content-Type\n            // req.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n            req.send(JSON.stringify({\n                trackerVersion: '3.4.16',\n                projectKey: options.projectKey,\n                doNotTrack,\n                // TODO: add precise reason (an exact API missing)\n            }));\n        }\n    }\n    use(fn) {\n        return fn(this.app, this.options);\n    }\n    isActive() {\n        if (this.app === null) {\n            return false;\n        }\n        return this.app.active();\n    }\n    active() {\n        deprecationWarn(\"'active' method\", \"'isActive' method\", \"/\");\n        return this.isActive();\n    }\n    start() {\n        if (!IN_BROWSER) {\n            console.error(`OpenReplay: you are trying to start Tracker on a node.js environment. If you want to use OpenReplay with SSR, please, use componentDidMount or useEffect API for placing the \\`tracker.start()\\` line. Check documentation on ${DOCS_HOST}${DOCS_SETUP}`);\n            return Promise.reject(\"Trying to start not in browser.\");\n        }\n        if (this.app === null) {\n            return Promise.reject(\"Browser doesn't support required api, or doNotTrack is active.\");\n        }\n        return this.app.start();\n    }\n    stop() {\n        if (this.app === null) {\n            return;\n        }\n        this.app.stop();\n    }\n    getSessionToken() {\n        if (this.app === null) {\n            return null;\n        }\n        return this.app.getSessionToken();\n    }\n    getSessionID() {\n        if (this.app === null) {\n            return null;\n        }\n        return this.app.getSessionID();\n    }\n    sessionID() {\n        deprecationWarn(\"'sessionID' method\", \"'getSessionID' method\", \"/\");\n        return this.getSessionID();\n    }\n    setUserID(id) {\n        if (typeof id === 'string' && this.app !== null) {\n            this.app.send(new UserID(id));\n        }\n    }\n    userID(id) {\n        deprecationWarn(\"'userID' method\", \"'setUserID' method\", \"/\");\n        this.setUserID(id);\n    }\n    setUserAnonymousID(id) {\n        if (typeof id === 'string' && this.app !== null) {\n            this.app.send(new UserAnonymousID(id));\n        }\n    }\n    userAnonymousID(id) {\n        deprecationWarn(\"'userAnonymousID' method\", \"'setUserAnonymousID' method\", \"/\");\n        this.setUserAnonymousID(id);\n    }\n    setMetadata(key, value) {\n        if (typeof key === 'string' &&\n            typeof value === 'string' &&\n            this.app !== null) {\n            this.app.send(new Metadata(key, value));\n        }\n    }\n    metadata(key, value) {\n        deprecationWarn(\"'metadata' method\", \"'setMetadata' method\", \"/\");\n        this.setMetadata(key, value);\n    }\n    event(key, payload, issue = false) {\n        if (typeof key === 'string' && this.app !== null) {\n            if (issue) {\n                return this.issue(key, payload);\n            }\n            else {\n                try {\n                    payload = JSON.stringify(payload);\n                }\n                catch (e) {\n                    return;\n                }\n                this.app.send(new RawCustomEvent(key, payload));\n            }\n        }\n    }\n    issue(key, payload) {\n        if (typeof key === 'string' && this.app !== null) {\n            try {\n                payload = JSON.stringify(payload);\n            }\n            catch (e) {\n                return;\n            }\n            this.app.send(new CustomIssue(key, payload));\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}